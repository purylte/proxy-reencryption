var searchIndex = new Map(JSON.parse('[\
["proxy_reencryption_lib",{"doc":"Implementation of Symmetric Proxy Re-encryption defined in …","t":"CCFFFONNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNHHHH","n":["proxy_reencryption_lib","utils","Blocks","Key","ProxyReencryption","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decryption","encryption","from","from","from","from_vec","from_vec","from_vec_no_pad","into","into","into","key","new","new","reencryption","reencryption_key_generator","remove_padding","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","encrypt","hash","new_random_arr","xor"],"q":[[0,"proxy_reencryption_lib"],[2,"proxy_reencryption_lib::proxy_reencryption_lib"],[44,"proxy_reencryption_lib::utils"],[48,"alloc::vec"],[49,"std::io::error"],[50,"core::result"],[51,"core::any"]],"d":["This module provides an implementation of the symmetric …","This module provides various cryptographic utilities.","Represents a collection of 16-byte blocks.","Represents a cryptographic key of a fixed size.","This struct represents a proxy re-encryption system.","The actual blocks.","","","","","","","","","Decrypts data using the proxy re-encryption scheme.","Encrypts data using the proxy re-encryption scheme.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Key</code> from a vector of bytes.","Creates a new <code>Blocks</code> from a vector of bytes, applying …","Creates a new <code>Blocks</code> from a vector of bytes without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The actual key bytes.","Creates a new <code>Key</code> from a byte array.","Creates a new <code>Blocks</code> from a vector of 16-byte blocks.","Re-encrypts data using the proxy re-encryption scheme.","Generates keys for re-encryption.","Removes PKCS#7 padding from the blocks.","","","","","","","","","","","","","","Encrypts a 128-bit plaintext using AES-128 in ECB mode.","Computes the SHA-256 hash of the input data then get the …","Generates a new random array of a specified size.","Performs a bitwise XOR operation on two arrays of the same …"],"i":[0,0,0,0,0,1,15,3,1,15,3,1,1,1,15,15,15,3,1,3,1,1,15,3,1,3,3,1,15,15,1,1,15,3,1,15,3,1,15,3,1,15,3,1,0,0,0,0],"f":"``````{ce{}{}}00000{bb}{{ce}d{}{}}{{fffh{l{j}}b}b}{{fffhb}{{n{{l{j}}b}}}}{cc{}}00{{{A`{j}}}f}{{{A`{j}}}b}0777`{{{l{j}}}f}{{{A`{{l{j}}}}}b}{{{A`{Ab}}ff{A`{Ab}}{l{j}}b}{{n{{l{j}}b}}}}{{fffAb}{{n{{A`{Ab}}ff{A`{Ab}}ff}}}}{b{{Ad{{A`{j}}}}}}<{c{{Af{e}}}{}{}}00000{cAh{}}00>>>{{Aj{l{j}}}{{l{j}}}}{{{Al{j}}}{{l{j}}}}{{}{{l{j}}}}{{{l{j}}{l{j}}}{{l{j}}}}","c":[],"p":[[5,"Blocks",2],[1,"unit"],[5,"Key",2],[1,"u64"],[1,"u8"],[1,"array"],[1,"tuple"],[5,"Vec",48],[1,"usize"],[8,"Result",49],[6,"Result",50],[5,"TypeId",51],[1,"u128"],[1,"slice"],[5,"ProxyReencryption",2]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
